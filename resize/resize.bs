<pre class='metadata'>
Title: <code>basic_string::uninitialized_resize</code>
Shortname: PXXX
Revision: 1
Audience: LEWG, LWG
Status: D
Group: WG21
URL: http://wg21.link/PXXXR0
!Source: <a href="https://github.com/mzeren-vmw/iso/blob/master/resize/resize.bs">https://github.com/mzeren-vmw/iso/blob/master/resize/resize.bs</a>
Editor: Mark Zeren, VMware, mzeren@vmware.com
Editor: Chris Kennelly, Google, ckennelly@google.com
Date: 2018-03-17
Markup Shorthands: markdown yes

Abstract: Add <code>basic_string::uninitialized_resize</code>

</pre>

Summary {#summary}
=======

Add <code>basic_string::uninitialized_resize</code> which
**default-initializes** any added elements, unlike
<code>basic_string::resize</code>, which value initializes any added elements.

Motivation {#motivation}
==========

When appending to a string, we may know the length of the data that we want to
append before the actual data is available. For example, we may be stamping a
pattern or reading from a network device. Ideally, we would ask
<code>basic_string</code> to pre-allocate space into which we can write.
However, <code>basic_string</code> does not give us an API to do this.

Some of the current sub-optimal choices include:

<ol>

<li> Call <code>append</code> multiple times incurring the overhead of
     conditional bookkeeping logic:</li>

<xmp>
constexpr char kPattern[] = "all work and no play ";
constexpr size_t kSize = sizeof(kPattern) - 1;

void Append(string& out, int count)
{
  out.reserve(out.size() + kSize * count);
  for (int i = 0; i < count; ++i) {
    out.append(kPattern);                  // Bookkeeping.
  }
}
</xmp>

<li> To avoid bookkeeping, call <code>resize()</code>, and write directly into
     the string. However, <code>resize</code> will <em>value initialize</em>
     <code>charT</code> writing zeros for the new elements: </li>

<Xmp>
void Append(string& out, int count)
{
  string::size_type start = out.size();
  out.resize(start + kSize * count);       // Write zeros.
  for (auto cur = out.begin() + start; cur < out.end(); cur += kSize) {
      memcpy(&*cur, kPattern, kSize);
  }
}
</xmp>

</ol>

The above overheads, while not huge, are measurable and can be significant in
aggregate.

Proposed Resolution {#resolution}
===================

We propose adding <code>uninitialized_resize</code> which
<em>default-initializes</em> new elements. With this API we can write:

<xmp>
void Append(string& out, int count)
{
  string::size_type start = out.size();
  out.uninitialized_resize(start + kSize * count);  // No zeros.
  //  ^^^^^^^^^^^^^^^^^^^^
  for (auto cur = out.begin() + start; cur < out.end(); cur += kSize) {
      memcpy(&*cur, kPattern, kSize);
  }
}
</xmp>

Implementation Experience {#experience}
========================

Google has patched their internal <code>basic_string</code> implementation to
implement a similar API and has measured performance improvements that justify
maintaining this extension.

Alternatives considered {#alt}
=======================

<ul>
<li>
**Q:** Why not <code>vector::uninitialized_resize</code>?

**A:** Strings often have internal structure in the sequence of elements,
  whereas vectors do not.
</li>
<li>
**Q:** Why not <code>basic_string::&lt;insert_method_name_here&gt;</code> ?

**A:** Imlementation experience has found that this one API addition is
  sufficient to cover known use cases.
</li>
</ul>
Wording {#wording}
=======

Relative to [[N4727]]:

Change 24.3.2 [**basic.string**] as depicted:
<blockquote>
<pre nohighlight>
// 24.3.2.4, capacity
size_type size() const noexcept;
size_type length() const noexcept;
size_type max_size() const noexcept;
void resize(size_type n, charT c);
void resize(size_type n);
<ins>void uninitialized_resize(size_type n);</ins>
size_type capacity() const noexcept;
void reserve(size_type res_arg = 0);
void shrink_to_fit();
void clear() noexcept;
[[nodiscard]] bool empty() const noexcept;
</pre>
</blockquote>

Change basic_string capacity [**string.capacity**] as depicted:

<blockquote>
<ins>
<pre nohighlight>
void uninitialized_resize(size_type n);
</pre>
<ol start="9">

<li> <em>Throws:</em> <tt>length_error</tt> if <tt>n > max_size()</tt>.

<li> <em>Effects:</em> Alters the length of the string designated by
     <tt>*this</tt> as follows:

— If <tt>n &lt;= size()</tt>, the function replaces the string designated
  by <tt>*this</tt> with a string of length <tt>n</tt> whose elements are a copy of
  the initial elements of the original string designated by <tt>*this</tt>.

— If <tt>n &gt; size()</tt>, the function replaces the string designated
  by <tt>*this</tt> with a string of length <tt>n</tt> whose first <tt>size()</tt>
  elements are a copy of the original string designated by <tt>*this</tt>, and
  whose remaining elements are all default initialized.</li>

</ol>
</ins>
</blockquote>