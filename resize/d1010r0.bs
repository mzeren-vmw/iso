<pre class='metadata'>
Title: <code>basic_string::resize_uninitialized</code>
Shortname: D1010
Revision: 0
Audience: LEWG, LWG
Status: D
Group: WG21
URL: http://wg21.link/D1010R0
!Source: <a href="https://github.com/mzeren-vmw/iso/blob/master/resize/d1010r0.bs">https://github.com/mzeren-vmw/iso/blob/master/resize/d1010r0.bs</a>
Editor: Mark Zeren, VMware, mzeren@vmware.com
Editor: Chris Kennelly, Google, ckennelly@google.com
Date: 2018-03-19
Markup Shorthands: markdown yes

Abstract: Extend <code>basic_string</code> to allow assignment of
          default-initialized elements. This new facility standardizes field
          proven, custom, extentions that reduce runtime overhead.

</pre>

Note: This is an early draft which disucsses two different approaches. We plan
      to select only one for the final P paper.

Summary {#summary}
=======

In <code>allocator_traits</code> add:

* `uninitialized_default_construct(Alloc& a, T* p)` - Default constructs `T`.
  This is optional and only participates in overload resolution when `T` 
  has a trivial destructor.

In `basic_string`, IFF `allocator_traits::uninitialized_default_construct<Alloc,
charT*>` is available, add:

-- PLAN A --

* <code>resize_uninitialized(size_type)</code> - Like <code>resize()</code> but
  default initializes any new elements added to the string. While the string
  contains indeterminate values it is said to be in an "uninitialized" state.
  Only a limited set of operations have defined behavior in this state: the
  destructor, <code>size()</code>, <code>capacity()</code>, <code>data()</code>,
  <code>assign()</code>, etc. .... The string cannot be copied, moved, or
  swapped in the uninitialized state. The uninitialized state is cleared when
  all indeterminate values have been assigned or by certain methods such as
  <code>resize</code>, <code>assign</code>, <code>clear()</code>, etc. ....

-- PLAN B --

* <code>uninitialized_data()</code> - Returns a pointer to elements in
  (<code>size()</code>, <code>capacity()</code>] All but the first of these
  elements may have indeterminate values, but may be assigned. Writing to the
  element at <code>size()</code> puts the string into an "unterminated" state.
  While in the unterminated state <code>c_str()</code> has undefined behavior.
  Additionally the "one past the end is charT()" guarantee is removed. The
  string cannot be copied, moved, or swapped in the unterminated state. Several
  methods can clear the "unterminated" state: <code>append</code>,
  <code>resize</code>, <code>assign()</code>, etc. ....

* <code>append_from_capacity(size_type n)</code> - Appends <code>n</code>
  elements from capacity. The application must have assigned these elements
  otherwise the behavior is undefined. Note that this allows the application to
  "snap" to a length based on the number of elements assigned.

Note: Both PLAN A and PLAN B add unfortunate "states" to
      <code>basic_string</code>. However, I'm pretty sure that PLAN B does not
      add a special state to <code>vector</code>. If we want PLAN B for
      <code>vector</code>, do we also want it for <code>basic_string</code>?

Motivation {#motivation}
==========

When appending to a string, we may know the total length of the data that we
intend to append before the actual append. For example, we may be stamping N
copies of a pattern or appending N <code>basic_string_view</code>s. Ideally, we
would ask <code>basic_string</code> to pre-allocate space into which we can
write. However, <code>basic_string</code> does not give us an zero-overhead API
to do this.

Some of the current choices include:

<ol>

<li> Call <strong><code>reserve</code></strong> and then <code>append</code> in
     a loop. However, this incurs bookkeeping overhead in each append.</li>

<xmp>
void AppendPattern(string& out, string_view pattern, unsigned count)
{
  out.reserve(out.size() + pattern.size() * count); // GOOD: No unnecessary writes.
  //  ^^^^^^^
  for (unsigned i = 0; i < count; ++i) {
    out.append(pattern);                            // BAD: Bookkeeping in append.
  }
}
</xmp>

<li> Call <strong><code>resize</code></strong> and write directly into the
     string. However, this value initializes elements, typically writing zeros:
     </li>

<xmp>
void AppendPattern(string& out, string_view pattern, unsigned count)
{
  string::size_type start = out.size();
  out.resize(start + pattern.size() * count);        // BAD: Write a lot of zeros.
  //  ^^^^^^
  for (auto cur = out.begin() + start;
      cur < out.end(); cur += pattern.size()) {
      memcpy(&*cur, pattern.data(), pattern.size()); // GOOD: No bookkeeping.
  }
}
</xmp>

</ol>

The above overheads are often small, but they can be significant in performance
critical call paths.

Proposed Resolution {#resolution}
===================

We propose adding <code>resize_uninitialized</code> which
<em>default-initializes</em> new elements. With this API we can write:

<xmp>
void AppendPattern(string& out, string_view pattern, unsigned count)
{
  string::size_type start = out.size();
  out.resize_uninitialized(start + pattern.size() * count); // GOOD: No unnecessary writes.
  //  ^^^^^^^^^^^^^^^^^^^^
  // out is in the uninitizliaed state.
  for (auto cur = out.begin() + start; cur < out.end(); cur += pattern.size()) {
      memcpy(&*cur, pattern.data(), pattern.size());        // GOOD: No bookkeeping.
  }
  // Uninitizliaed state cleared.
}
</xmp>

Here's an example for managing the uninitialized state in the face of failure:

<xmp>
void WritePattern(char *p, string_view pattern, unsigned count);  // May throw.

void AppendPattern(string& out, string_view pattern, unsigned count)
{
  string::size_type start = out.size();
  out.resize_uninitialized(start + pattern.size() * count);
  // Guarentee that we clear uninitialized state.
  experimental::scope_fail fail([] { out.resize(start); });
  WritePattern(out.data() + start(), pattern, count);
}
</xmp>

-- PLAN B --

<xmp>
void AppendPattern(string& out, string_view pattern, unsigned count)
{
  string::size_type start = out.size();
  size_type len = pattern.size() * count;
  out.reserve(start + len);
  char *cur = out. uninitialized_data();
  char * const end = cur + len;
  for (; cur < end; cur += pattern.size()) {
      memcpy(&*cur, pattern.data(), pattern.size());
  }
  out.append_from_capacity(len);
}
</xmp>

Here's an example for managing the uninitialized state in the face of failure:

<xmp>
void WritePattern(char *p, string_view pattern, unsigned count);  // May throw.

void AppendPattern(string& out, string_view pattern, unsigned count)
{
  string::size_type start = out.size();
  size_type len = pattern.size() * count;
  out.reserve(start + len);
  char *cur = out.uninitialized_data();
  char * const end = cur + len;
  experimental::scope_fail fail([] {       // Guarentee that we clear
      *out.uninitialized_data() = char();  // uninitialized state.
  });
  WritePattern(out.data() + start(), pattern, count);
}
</xmp>

(Do we want to simplify the <code>scope_fail</code> by saying that
<code>resize(size())</code> always re-writes the terminating null? No?)

Implementation Experience {#experience}
========================

Google {#google}
------

Google has hacked their internal <code>basic_string</code> implementation to
provide this API and has measured performance improvements (that are not public)
that justify maintaining this extension.

Google's Abseil open source library provides hooks for other users that want to
independently apply the same hack. See:
<a href="https://github.com/abseil/abseil-cpp/blob/master/absl/strings/internal/resize_uninitialized.h">
https://github.com/abseil/abseil-cpp/blob/master/absl/strings/internal/resize_uninitialized.h</a>

Google's Protocol Buffers open source library takes advantage of Abseil's hooks
to improve performance. See:
<a href="https://github.com/google/protobuf/blob/master/src/google/protobuf/stubs/stl_util.h#L61">
https://github.com/google/protobuf/blob/master/src/google/protobuf/stubs/stl_util.h#L61</a>

Boost {#boost}
-----

* <a href="https://github.com/boostorg/container/commit/14f092ab00def8e692b81d57d0466a617a6f6130">
  Default initialization for vector-like containers</a> Ion Gazta√±aga.

* <a href="https://github.com/boostorg/container/blob/develop/include/boost/container/vector.hpp">
  boost/container/vector.hpp</a>

<xmp>
   //! <b>Effects</b>: Constructs a vector that will use a copy of allocator a
   //!   and inserts n default initialized values.
   //!
   //! <b>Throws</b>: If allocator_type's allocation
   //!   throws or T's default initialization throws.
   //!
   //! <b>Complexity</b>: Linear to n.
   //!
   //! <b>Note</b>: Non-standard extension
   vector(size_type n, default_init_t);
   vector(size_type n, default_init_t, const allocator_type &a)
   ...
   void resize(size_type new_size, default_init_t);
   ...
</xmp>

Also supported in Boost Container small_vector, static_vector, deque, stable_vector, string.


VMware {#vmware}
------

VMware, unaware of Google's work, has internal string formatters that avoid
<code>std::string</code> due, in part, to <code>reserve</code>'s zero-writing
behavior.

Alternatives considered {#alt}
=======================

<ul><li>

**Q:** Why not <code>vector::resize_uninitialized</code>?

**A:** <br/> a) Strings often have internal structure in the sequence of elements,
  whereas vectors do not. <br/> b) Strings most often contain literal types like char
  where default initialization does nothing, while vectors are often used for
  user defined types where default initialization does additional work. </li>

**Q:** Why not <code>basic_string::insert_uninitialized(...)</code>, etc.?

**A:** Implementation experience shows that <code>resize</code> covers the
  important use cases.

</li></ul>

Wording {#wording}
=======

Note: OUTDATED

Relative to [[N4727]]:

Change 24.3.2 [**basic.string**] as depicted:
<blockquote>
<pre nohighlight>
// 24.3.2.4, capacity
size_type size() const noexcept;
size_type length() const noexcept;
size_type max_size() const noexcept;
void resize(size_type n, charT c);
void resize(size_type n);
<ins>void resize_uninitialized(size_type n);</ins>
size_type capacity() const noexcept;
void reserve(size_type res_arg = 0);
void shrink_to_fit();
void clear() noexcept;
[[nodiscard]] bool empty() const noexcept;
</pre>
</blockquote>

Change [**string.capacity**] as depicted:

<blockquote>
<ins>
<pre nohighlight>
void resize_uninitialized(size_type n);
</pre>
<ol start="9">

<li> <em>Throws:</em> <tt>length_error</tt> if <tt>n > max_size()</tt>.

<li> <em>Effects:</em> Alters the length of the string designated by
     <tt>*this</tt> as follows:

‚Äî If <tt>n &lt;= size()</tt>, Calls <tt>resize(n)</tt>.

‚Äî If <tt>n &gt; size()</tt>, the function replaces the string designated
  by <tt>*this</tt> with a string of length <tt>n</tt> whose first <tt>size()</tt>
  elements are a copy of the original string designated by <tt>*this</tt>, and
  whose remaining elements are all default initialized.</li>

</ol>
</ins>
</blockquote>

Acknowledgements {#acknowledgements}
================

* <strong>Agust√≠n Berg√©</strong> provided guidence on object lifetime and
  allocator interactions.

References {#references}
==========

* std-proposals discussion of basic_string::resize_uninitialized.
** https://groups.google.com/a/isocpp.org/forum/#!topic/std-proposals/XIO4KbBTxl0

* XXX Glen Fernandes mentioned that he is working on a proposal to add default
  initialized make_unique/make_shared, etc. So not related to containers and
  allocators, but probably worth a reference when it becomes available.

* XXX http://eel.is/c++draft/dcl.init#12

